{"ast":null,"code":"// Convert Form Array To json\nexport var objectifyForm = function objectifyForm(formArray) {\n  //serialize data function\n  var returnArray = {};\n\n  for (var i = 0; i < formArray.length; i++) {\n    returnArray[formArray[i]['name']] = formArray[i]['value'];\n  }\n\n  return returnArray;\n}; //  Check string is json or not\n\nexport var isJSON = function isJSON(str) {\n  try {\n    return JSON.parse(str) && !!str;\n  } catch (e) {\n    return false;\n  }\n}; //  Add comma seprator to digit number\n\nexport var numberSeprator = function numberSeprator(num, sep) {\n  var number = typeof num === 'number' ? num.toString() : num,\n      separator = typeof sep === 'undefined' ? ',' : sep;\n  return number.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1' + separator);\n}; //  Remove comma seprator From digit number\n\nexport var removeSeprator = function removeSeprator(num, sep) {\n  var separator = typeof sep === 'undefined' ? ',' : sep;\n  var re = new RegExp(separator, 'g');\n  return num.replace(re, '');\n}; //  Convert elemetn's value for remove all charachters exept number, Just Allow Type Numbers\n\nexport var forceNumeric = function forceNumeric(e) {\n  var $input = e.target.current;\n  $input.val($input.val().replace(/[^\\d]+/g, ''));\n}; //  Convert Persian & Arabic number to English\n\nvar persianNumbersExp = [/۰/g, /۱/g, /۲/g, /۳/g, /۴/g, /۵/g, /۶/g, /۷/g, /۸/g, /۹/g];\nvar arabicNumbersExp = [/٠/g, /١/g, /٢/g, /٣/g, /٤/g, /٥/g, /٦/g, /٧/g, /٨/g, /٩/g];\nvar englishNumbersExp = [/0/g, /1/g, /2/g, /3/g, /4/g, /5/g, /6/g, /7/g, /8/g, /9/g];\nvar persianNumbers = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];\nexport var fixNumbers = function fixNumbers(str) {\n  str = str.toString();\n\n  if (typeof str === 'string') {\n    for (var i = 0; i < 10; i++) {\n      str = str.replace(persianNumbersExp[i], i).replace(arabicNumbersExp[i], i);\n    }\n  }\n\n  return str;\n}; //  Convert  English number to Persian\n\nexport var convertNumber = function convertNumber(str) {\n  str = str.toString();\n\n  if (typeof str === 'string') {\n    for (var i = 0; i < 10; i++) {\n      str = str.replace(englishNumbersExp[i], persianNumbers[i]);\n    }\n  }\n\n  return str;\n}; //  Check if value Start (^) with a Persian word\n\nexport var checkPersianWord = function checkPersianWord(string) {\n  if (!/^[پچجحخهعغفقثصضشسیبلاتنمکگوئدذرزطظژؤإأءًٌٍَُِّ\\s\\n\\r\\t\\d\\(\\)\\[\\]\\{\\}.,،;\\-؛]+$/.test(string)) {//console.log('با کلمه فارسی شروع نشده');\n  } else {//console.log('با کلمه فارسی شروع شده');\n    }\n}; //  Dont Allow Specials Charachters and numbers to type and replace them with remove, Work Fine\n\nexport var forceLetter = function forceLetter(e) {\n  var $input = e.target.current;\n  $input.val($input.val().replace(/\\d/g, ''));\n  $input.val($input.val().replace(/[&\\/\\\\#,@@|+=!-_()$~%.'\":*؟،×÷?<>{}]/g, '')); //$input.val($input.val().replace(/\\s/g,''));       // space\n};\nexport default numberSeprator;","map":{"version":3,"sources":["E:\\Programs\\Programing Code\\GithubDesktop\\nextjs\\utils\\tools.js"],"names":["objectifyForm","formArray","returnArray","i","length","isJSON","str","JSON","parse","e","numberSeprator","num","sep","number","toString","separator","replace","removeSeprator","re","RegExp","forceNumeric","$input","target","current","val","persianNumbersExp","arabicNumbersExp","englishNumbersExp","persianNumbers","fixNumbers","convertNumber","checkPersianWord","string","test","forceLetter"],"mappings":"AAAA;AACA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,SAAS,EAAI;AACxC;AACA,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCD,IAAAA,WAAW,CAACD,SAAS,CAACE,CAAD,CAAT,CAAa,MAAb,CAAD,CAAX,GAAoCF,SAAS,CAACE,CAAD,CAAT,CAAa,OAAb,CAApC;AACD;;AACD,SAAOD,WAAP;AACD,CAPM,C,CAQP;;AACA,OAAO,IAAMG,MAAM,GAAG,SAATA,MAAS,CAAAC,GAAG,EAAI;AAC3B,MAAI;AACF,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAX,KAAmB,CAAC,CAACA,GAA5B;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,CANM,C,CAOP;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC1C,MAAIC,MAAM,GAAG,OAAOF,GAAP,KAAe,QAAf,GAA0BA,GAAG,CAACG,QAAJ,EAA1B,GAA2CH,GAAxD;AAAA,MACEI,SAAS,GAAG,OAAOH,GAAP,KAAe,WAAf,GAA6B,GAA7B,GAAmCA,GADjD;AAEA,SAAOC,MAAM,CAACG,OAAP,CAAe,0BAAf,EAA2C,OAAOD,SAAlD,CAAP;AACD,CAJM,C,CAKP;;AACA,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACN,GAAD,EAAMC,GAAN,EAAc;AAC1C,MAAIG,SAAS,GAAG,OAAOH,GAAP,KAAe,WAAf,GAA6B,GAA7B,GAAmCA,GAAnD;AACA,MAAIM,EAAE,GAAG,IAAIC,MAAJ,CAAWJ,SAAX,EAAsB,GAAtB,CAAT;AACA,SAAOJ,GAAG,CAACK,OAAJ,CAAYE,EAAZ,EAAgB,EAAhB,CAAP;AACD,CAJM,C,CAKP;;AACA,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAAAX,CAAC,EAAI;AAC/B,MAAIY,MAAM,GAAGZ,CAAC,CAACa,MAAF,CAASC,OAAtB;AACAF,EAAAA,MAAM,CAACG,GAAP,CAAWH,MAAM,CAACG,GAAP,GAAaR,OAAb,CAAqB,SAArB,EAAgC,EAAhC,CAAX;AACD,CAHM,C,CAIP;;AACA,IAAMS,iBAAiB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,CAA1B;AACA,IAAMC,gBAAgB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,CAAzB;AACA,IAAMC,iBAAiB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,CAA1B;AACA,IAAMC,cAAc,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,CAAvB;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAvB,GAAG,EAAI;AAC/BA,EAAAA,GAAG,GAAGA,GAAG,CAACQ,QAAJ,EAAN;;AACA,MAAI,OAAOR,GAAP,KAAe,QAAnB,EAA6B;AAC3B,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BG,MAAAA,GAAG,GAAGA,GAAG,CAACU,OAAJ,CAAYS,iBAAiB,CAACtB,CAAD,CAA7B,EAAkCA,CAAlC,EAAqCa,OAArC,CAA6CU,gBAAgB,CAACvB,CAAD,CAA7D,EAAkEA,CAAlE,CAAN;AACD;AACF;;AACD,SAAOG,GAAP;AACD,CARM,C,CASP;;AACA,OAAO,IAAMwB,aAAa,GAAG,SAAhBA,aAAgB,CAAAxB,GAAG,EAAI;AAClCA,EAAAA,GAAG,GAAGA,GAAG,CAACQ,QAAJ,EAAN;;AACA,MAAI,OAAOR,GAAP,KAAe,QAAnB,EAA6B;AAC3B,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BG,MAAAA,GAAG,GAAGA,GAAG,CAACU,OAAJ,CAAYW,iBAAiB,CAACxB,CAAD,CAA7B,EAAkCyB,cAAc,CAACzB,CAAD,CAAhD,CAAN;AACD;AACF;;AACD,SAAOG,GAAP;AACD,CARM,C,CASP;;AACA,OAAO,IAAMyB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,MAAM,EAAI;AACxC,MAAI,CAAC,iFAAiFC,IAAjF,CAAsFD,MAAtF,CAAL,EAAoG,CAClG;AACD,GAFD,MAEO,CACL;AACD;AACF,CANM,C,CAOP;;AACA,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAzB,CAAC,EAAI;AAC9B,MAAIY,MAAM,GAAGZ,CAAC,CAACa,MAAF,CAASC,OAAtB;AACAF,EAAAA,MAAM,CAACG,GAAP,CAAWH,MAAM,CAACG,GAAP,GAAaR,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAAX;AACAK,EAAAA,MAAM,CAACG,GAAP,CAAWH,MAAM,CAACG,GAAP,GAAaR,OAAb,CAAqB,uCAArB,EAA8D,EAA9D,CAAX,EAH8B,CAI9B;AACD,CALM;AAMP,eAAeN,cAAf","sourcesContent":["// Convert Form Array To json\r\nexport const objectifyForm = formArray => {\r\n  //serialize data function\r\n  let returnArray = {};\r\n  for (var i = 0; i < formArray.length; i++) {\r\n    returnArray[formArray[i]['name']] = formArray[i]['value'];\r\n  }\r\n  return returnArray;\r\n};\r\n//  Check string is json or not\r\nexport const isJSON = str => {\r\n  try {\r\n    return JSON.parse(str) && !!str;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n//  Add comma seprator to digit number\r\nexport const numberSeprator = (num, sep) => {\r\n  let number = typeof num === 'number' ? num.toString() : num,\r\n    separator = typeof sep === 'undefined' ? ',' : sep;\r\n  return number.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1' + separator);\r\n};\r\n//  Remove comma seprator From digit number\r\nexport const removeSeprator = (num, sep) => {\r\n  let separator = typeof sep === 'undefined' ? ',' : sep;\r\n  var re = new RegExp(separator, 'g');\r\n  return num.replace(re, '');\r\n};\r\n//  Convert elemetn's value for remove all charachters exept number, Just Allow Type Numbers\r\nexport const forceNumeric = e => {\r\n  let $input = e.target.current;\r\n  $input.val($input.val().replace(/[^\\d]+/g, ''));\r\n};\r\n//  Convert Persian & Arabic number to English\r\nconst persianNumbersExp = [/۰/g, /۱/g, /۲/g, /۳/g, /۴/g, /۵/g, /۶/g, /۷/g, /۸/g, /۹/g];\r\nconst arabicNumbersExp = [/٠/g, /١/g, /٢/g, /٣/g, /٤/g, /٥/g, /٦/g, /٧/g, /٨/g, /٩/g];\r\nconst englishNumbersExp = [/0/g, /1/g, /2/g, /3/g, /4/g, /5/g, /6/g, /7/g, /8/g, /9/g];\r\nconst persianNumbers = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];\r\nexport const fixNumbers = str => {\r\n  str = str.toString();\r\n  if (typeof str === 'string') {\r\n    for (let i = 0; i < 10; i++) {\r\n      str = str.replace(persianNumbersExp[i], i).replace(arabicNumbersExp[i], i);\r\n    }\r\n  }\r\n  return str;\r\n};\r\n//  Convert  English number to Persian\r\nexport const convertNumber = str => {\r\n  str = str.toString();\r\n  if (typeof str === 'string') {\r\n    for (let i = 0; i < 10; i++) {\r\n      str = str.replace(englishNumbersExp[i], persianNumbers[i]);\r\n    }\r\n  }\r\n  return str;\r\n};\r\n//  Check if value Start (^) with a Persian word\r\nexport const checkPersianWord = string => {\r\n  if (!/^[پچجحخهعغفقثصضشسیبلاتنمکگوئدذرزطظژؤإأءًٌٍَُِّ\\s\\n\\r\\t\\d\\(\\)\\[\\]\\{\\}.,،;\\-؛]+$/.test(string)) {\r\n    //console.log('با کلمه فارسی شروع نشده');\r\n  } else {\r\n    //console.log('با کلمه فارسی شروع شده');\r\n  }\r\n};\r\n//  Dont Allow Specials Charachters and numbers to type and replace them with remove, Work Fine\r\nexport const forceLetter = e => {\r\n  let $input = e.target.current;\r\n  $input.val($input.val().replace(/\\d/g, ''));\r\n  $input.val($input.val().replace(/[&\\/\\\\#,@@|+=!-_()$~%.'\":*؟،×÷?<>{}]/g, ''));\r\n  //$input.val($input.val().replace(/\\s/g,''));       // space\r\n};\r\nexport default numberSeprator;"]},"metadata":{},"sourceType":"module"}